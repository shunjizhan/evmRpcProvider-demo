import { BigNumber } from '@ethersproject/bignumber';
import { ApiPromise } from '@polkadot/api';
import type { GenericExtrinsic } from '@polkadot/types';
import type { EventRecord } from '@polkadot/types/interfaces';
import type { EvmLog } from '@polkadot/types/interfaces/types';
import type { FrameSystemEventRecord } from '@polkadot/types/lookup';
import { AnyTuple } from '@polkadot/types/types';
export interface PartialLog {
    removed: boolean;
    address: string;
    data: string;
    topics: string[];
    logIndex: number;
}
export interface ExtrinsicMethodJSON {
    callIndex: string;
    args: {
        action?: {
            [key: string]: string;
        };
        init?: string;
        input?: string;
        target?: string;
        value: number;
        gas_limit: number;
        storage_limit: number;
        access_list: any[];
        valid_until?: number;
    };
}
export declare const getPartialLog: (evmLog: EvmLog, logIndex: number) => PartialLog;
export declare const getPartialLogs: (evmLogs: EvmLog[]) => PartialLog[];
export interface PartialTransactionReceipt {
    to?: string;
    from: string;
    logs: PartialLog[];
    contractAddress?: string;
    root?: string;
    logsBloom: string;
    byzantium: boolean;
    type: number;
    gasUsed: BigNumber;
    cumulativeGasUsed: BigNumber;
    status?: number;
    exitReason?: string;
}
export declare const getPartialTransactionReceipt: (event: FrameSystemEventRecord) => PartialTransactionReceipt;
export declare const getEvmExtrinsicIndexes: (events: EventRecord[]) => number[];
export declare const findEvmEvent: (events: EventRecord[]) => EventRecord | undefined;
export declare const getTransactionIndexAndHash: (hashOrNumber: string | number, extrinsics: GenericExtrinsic[], events: EventRecord[]) => {
    transactionIndex: number;
    transactionHash: string;
    isExtrinsicFailed: boolean;
    extrinsicIndex: number;
};
export declare const parseExtrinsic: (extrinsic: GenericExtrinsic) => {
    value: string;
    gas: number;
    input: string;
    to: string | null;
    nonce: number;
    v: string;
    r: string;
    s: string;
};
export declare const getEffectiveGasPrice: (evmEvent: EventRecord, api: ApiPromise, blockHash: string, extrinsic: GenericExtrinsic<AnyTuple>, actualWeight: number) => Promise<BigNumber>;
//# sourceMappingURL=transactionReceiptHelper.d.ts.map