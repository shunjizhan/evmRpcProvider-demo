import { Extrinsic } from '@polkadot/types/interfaces';
import { AnyFunction } from '@polkadot/types/types';
import { BigNumber } from 'ethers';
import { CacheInspect } from './BlockCache';
import { _Metadata } from './gqlTypes';
export interface EthCallTimingResult {
    gasPriceTime: number;
    estimateGasTime: number;
    getBlockTime: number;
    getFullBlockTime: number;
}
export interface HealthResult {
    isHealthy: boolean;
    isSubqlOK: boolean;
    isCacheOK: boolean;
    isRPCOK: boolean;
    msg: string[];
    moreInfo: {
        cachedBlocksCount: number;
        maxCachedBlocksCount: number;
        lastProcessedHeight: number;
        targetHeight: number;
        curFinalizedHeight: number;
        lastProcessedTimestamp: number;
        curTimestamp: number;
        idleSeconds: number;
        idleBlocks: number;
        indexerHealthy: boolean;
        ethCallTiming: EthCallTimingResult;
    };
}
export interface HealthData {
    indexerMeta?: _Metadata;
    cacheInfo?: CacheInspect;
    curFinalizedHeight: number;
    ethCallTiming: EthCallTimingResult;
}
export declare const sleep: (interval?: number) => Promise<null>;
export declare const isEVMExtrinsic: (e: Extrinsic) => boolean;
export declare const runWithRetries: <F extends AnyFunction>(fn: F, args?: any[], maxRetries?: number, interval?: number) => Promise<F extends (...args: any[]) => infer R ? R : never>;
export declare const getHealthResult: ({ indexerMeta, cacheInfo, curFinalizedHeight, ethCallTiming }: HealthData) => HealthResult;
export declare const runWithTiming: <F extends AnyFunction>(fn: F, repeats?: number) => Promise<{
    time: number;
    res: F extends (...args: any[]) => infer R ? string | R : any;
}>;
export declare const nativeToEthDecimal: (value: any, nativeDecimals?: number) => BigNumber;
//# sourceMappingURL=utils.d.ts.map