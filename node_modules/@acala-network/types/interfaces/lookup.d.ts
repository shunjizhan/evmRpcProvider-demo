declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: pallet_balances::AccountData<Balance>
     **/
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    /**
     * Lookup7: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU64: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup11: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup13: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup16: frame_system::EventRecord<karura_runtime::Event, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup18: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup19: frame_support::weights::DispatchInfo
     **/
    FrameSupportWeightsDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup20: frame_support::weights::DispatchClass
     **/
    FrameSupportWeightsDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup21: frame_support::weights::Pays
     **/
    FrameSupportWeightsPays: {
        _enum: string[];
    };
    /**
     * Lookup22: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
        };
    };
    /**
     * Lookup23: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup24: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup25: sp_runtime::ArithmeticError
     **/
    SpRuntimeArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup26: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallLookupFailed: {
                task: string;
                id: string;
                error: string;
            };
        };
    };
    /**
     * Lookup31: frame_support::traits::schedule::LookupError
     **/
    FrameSupportScheduleLookupError: {
        _enum: string[];
    };
    /**
     * Lookup32: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            ItemCompleted: string;
            DispatchedAs: {
                result: string;
            };
        };
    };
    /**
     * Lookup33: pallet_multisig::pallet::Event<T>
     **/
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: {
                approving: string;
                multisig: string;
                callHash: string;
            };
            MultisigApproval: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
            MultisigExecuted: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
                result: string;
            };
            MultisigCancelled: {
                cancelling: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup34: pallet_multisig::Timepoint<BlockNumber>
     **/
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup35: pallet_proxy::pallet::Event<T>
     **/
    PalletProxyEvent: {
        _enum: {
            ProxyExecuted: {
                result: string;
            };
            AnonymousCreated: {
                anonymous: string;
                who: string;
                proxyType: string;
                disambiguationIndex: string;
            };
            Announced: {
                real: string;
                proxy: string;
                callHash: string;
            };
            ProxyAdded: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup36: runtime_common::ProxyType
     **/
    RuntimeCommonProxyType: {
        _enum: string[];
    };
    /**
     * Lookup38: module_transaction_pause::module::Event<T>
     **/
    ModuleTransactionPauseModuleEvent: {
        _enum: {
            TransactionPaused: {
                palletNameBytes: string;
                functionNameBytes: string;
            };
            TransactionUnpaused: {
                palletNameBytes: string;
                functionNameBytes: string;
            };
        };
    };
    /**
     * Lookup39: module_idle_scheduler::module::Event<T>
     **/
    ModuleIdleSchedulerModuleEvent: {
        _enum: {
            TaskDispatched: {
                taskId: string;
                result: string;
            };
        };
    };
    /**
     * Lookup40: pallet_preimage::pallet::Event<T>
     **/
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup41: pallet_balances::pallet::Event<T, I>
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: {
                account: string;
                freeBalance: string;
            };
            DustLost: {
                account: string;
                amount: string;
            };
            Transfer: {
                from: string;
                to: string;
                amount: string;
            };
            BalanceSet: {
                who: string;
                free: string;
                reserved: string;
            };
            Reserved: {
                who: string;
                amount: string;
            };
            Unreserved: {
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                from: string;
                to: string;
                amount: string;
                destinationStatus: string;
            };
            Deposit: {
                who: string;
                amount: string;
            };
            Withdraw: {
                who: string;
                amount: string;
            };
            Slashed: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup42: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup43: orml_tokens::module::Event<T>
     **/
    OrmlTokensModuleEvent: {
        _enum: {
            Endowed: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustLost: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Transfer: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            Reserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Unreserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            RepatriatedReserve: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
                status: string;
            };
            BalanceSet: {
                currencyId: string;
                who: string;
                free: string;
                reserved: string;
            };
        };
    };
    /**
     * Lookup44: acala_primitives::currency::CurrencyId
     **/
    AcalaPrimitivesCurrencyCurrencyId: {
        _enum: {
            Token: string;
            DexShare: string;
            Erc20: string;
            StableAssetPoolToken: string;
            LiquidCrowdloan: string;
            ForeignAsset: string;
        };
    };
    /**
     * Lookup45: acala_primitives::currency::TokenSymbol
     **/
    AcalaPrimitivesCurrencyTokenSymbol: {
        _enum: string[];
    };
    /**
     * Lookup46: acala_primitives::currency::DexShare
     **/
    AcalaPrimitivesCurrencyDexShare: {
        _enum: {
            Token: string;
            Erc20: string;
            LiquidCrowdloan: string;
            ForeignAsset: string;
            StableAssetPoolToken: string;
        };
    };
    /**
     * Lookup49: module_currencies::module::Event<T>
     **/
    ModuleCurrenciesModuleEvent: {
        _enum: {
            Transferred: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            BalanceUpdated: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Deposited: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Withdrawn: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustSwept: {
                currencyId: string;
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup51: orml_vesting::module::Event<T>
     **/
    OrmlVestingModuleEvent: {
        _enum: {
            VestingScheduleAdded: {
                from: string;
                to: string;
                vestingSchedule: string;
            };
            Claimed: {
                who: string;
                amount: string;
            };
            VestingSchedulesUpdated: {
                who: string;
            };
        };
    };
    /**
     * Lookup52: orml_vesting::VestingSchedule<BlockNumber, Balance>
     **/
    OrmlVestingVestingSchedule: {
        start: string;
        period: string;
        periodCount: string;
        perPeriod: string;
    };
    /**
     * Lookup54: module_transaction_payment::module::Event<T>
     **/
    ModuleTransactionPaymentModuleEvent: {
        _enum: {
            ChargeFeePoolEnabled: {
                subAccount: string;
                currencyId: string;
                feeSwapPath: string;
                exchangeRate: string;
                poolSize: string;
                swapThreshold: string;
            };
            ChargeFeePoolSwapped: {
                subAccount: string;
                supplyCurrencyId: string;
                oldExchangeRate: string;
                swapExchangeRate: string;
                newExchangeRate: string;
                newPoolSize: string;
            };
            ChargeFeePoolDisabled: {
                currencyId: string;
                foreignAmount: string;
                nativeAmount: string;
            };
        };
    };
    /**
     * Lookup57: pallet_treasury::pallet::Event<T, I>
     **/
    PalletTreasuryEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
            };
            Spending: {
                budgetRemaining: string;
            };
            Awarded: {
                proposalIndex: string;
                award: string;
                account: string;
            };
            Rejected: {
                proposalIndex: string;
                slashed: string;
            };
            Burnt: {
                burntFunds: string;
            };
            Rollover: {
                rolloverBalance: string;
            };
            Deposit: {
                value: string;
            };
        };
    };
    /**
     * Lookup58: pallet_bounties::pallet::Event<T>
     **/
    PalletBountiesEvent: {
        _enum: {
            BountyProposed: {
                index: string;
            };
            BountyRejected: {
                index: string;
                bond: string;
            };
            BountyBecameActive: {
                index: string;
            };
            BountyAwarded: {
                index: string;
                beneficiary: string;
            };
            BountyClaimed: {
                index: string;
                payout: string;
                beneficiary: string;
            };
            BountyCanceled: {
                index: string;
            };
            BountyExtended: {
                index: string;
            };
        };
    };
    /**
     * Lookup59: pallet_tips::pallet::Event<T>
     **/
    PalletTipsEvent: {
        _enum: {
            NewTip: {
                tipHash: string;
            };
            TipClosing: {
                tipHash: string;
            };
            TipClosed: {
                tipHash: string;
                who: string;
                payout: string;
            };
            TipRetracted: {
                tipHash: string;
            };
            TipSlashed: {
                tipHash: string;
                finder: string;
                deposit: string;
            };
        };
    };
    /**
     * Lookup60: module_collator_selection::pallet::Event<T>
     **/
    ModuleCollatorSelectionEvent: {
        _enum: {
            NewInvulnerables: {
                newInvulnerables: string;
            };
            NewDesiredCandidates: {
                newDesiredCandidates: string;
            };
            NewCandidacyBond: {
                newCandidacyBond: string;
            };
            CandidateAdded: {
                who: string;
                bond: string;
            };
            CandidateRemoved: {
                who: string;
            };
        };
    };
    /**
     * Lookup62: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup63: module_session_manager::module::Event<T>
     **/
    ModuleSessionManagerModuleEvent: {
        _enum: {
            ScheduledSessionDuration: {
                blockNumber: string;
                sessionIndex: string;
                sessionDuration: string;
            };
        };
    };
    /**
     * Lookup64: cumulus_pallet_xcmp_queue::pallet::Event<T>
     **/
    CumulusPalletXcmpQueueEvent: {
        _enum: {
            Success: string;
            Fail: string;
            BadVersion: string;
            BadFormat: string;
            UpwardMessageSent: string;
            XcmpMessageSent: string;
            OverweightEnqueued: string;
            OverweightServiced: string;
        };
    };
    /**
     * Lookup66: xcm::v2::traits::Error
     **/
    XcmV2TraitsError: {
        _enum: {
            Overflow: string;
            Unimplemented: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            MultiLocationFull: string;
            MultiLocationNotInvertible: string;
            BadOrigin: string;
            InvalidLocation: string;
            AssetNotFound: string;
            FailedToTransactAsset: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            ExceedsMaxMessageSize: string;
            DestinationUnsupported: string;
            Transport: string;
            Unroutable: string;
            UnknownClaim: string;
            FailedToDecode: string;
            MaxWeightInvalid: string;
            NotHoldingFees: string;
            TooExpensive: string;
            Trap: string;
            UnhandledXcmVersion: string;
            WeightLimitReached: string;
            Barrier: string;
            WeightNotComputable: string;
        };
    };
    /**
     * Lookup68: pallet_xcm::pallet::Event<T>
     **/
    PalletXcmEvent: {
        _enum: {
            Attempted: string;
            Sent: string;
            UnexpectedResponse: string;
            ResponseReady: string;
            Notified: string;
            NotifyOverweight: string;
            NotifyDispatchError: string;
            NotifyDecodeFailed: string;
            InvalidResponder: string;
            InvalidResponderVersion: string;
            ResponseTaken: string;
            AssetsTrapped: string;
            VersionChangeNotified: string;
            SupportedVersionChanged: string;
            NotifyTargetSendFail: string;
            NotifyTargetMigrationFail: string;
        };
    };
    /**
     * Lookup69: xcm::v2::traits::Outcome
     **/
    XcmV2TraitsOutcome: {
        _enum: {
            Complete: string;
            Incomplete: string;
            Error: string;
        };
    };
    /**
     * Lookup70: xcm::v1::multilocation::MultiLocation
     **/
    XcmV1MultiLocation: {
        parents: string;
        interior: string;
    };
    /**
     * Lookup71: xcm::v1::multilocation::Junctions
     **/
    XcmV1MultilocationJunctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup72: xcm::v1::junction::Junction
     **/
    XcmV1Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /**
     * Lookup74: xcm::v0::junction::NetworkId
     **/
    XcmV0JunctionNetworkId: {
        _enum: {
            Any: string;
            Named: string;
            Polkadot: string;
            Kusama: string;
        };
    };
    /**
     * Lookup76: xcm::v0::junction::BodyId
     **/
    XcmV0JunctionBodyId: {
        _enum: {
            Unit: string;
            Named: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
        };
    };
    /**
     * Lookup77: xcm::v0::junction::BodyPart
     **/
    XcmV0JunctionBodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /**
     * Lookup78: xcm::v2::Xcm<Call>
     **/
    XcmV2Xcm: string;
    /**
     * Lookup80: xcm::v2::Instruction<Call>
     **/
    XcmV2Instruction: {
        _enum: {
            WithdrawAsset: string;
            ReserveAssetDeposited: string;
            ReceiveTeleportedAsset: string;
            QueryResponse: {
                queryId: string;
                response: string;
                maxWeight: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            ClearOrigin: string;
            DescendOrigin: string;
            ReportError: {
                queryId: string;
                dest: string;
                maxResponseWeight: string;
            };
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                xcm: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                xcm: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                xcm: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
                maxResponseWeight: string;
            };
            BuyExecution: {
                fees: string;
                weightLimit: string;
            };
            RefundSurplus: string;
            SetErrorHandler: string;
            SetAppendix: string;
            ClearError: string;
            ClaimAsset: {
                assets: string;
                ticket: string;
            };
            Trap: string;
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
        };
    };
    /**
     * Lookup81: xcm::v1::multiasset::MultiAssets
     **/
    XcmV1MultiassetMultiAssets: string;
    /**
     * Lookup83: xcm::v1::multiasset::MultiAsset
     **/
    XcmV1MultiAsset: {
        id: string;
        fun: string;
    };
    /**
     * Lookup84: xcm::v1::multiasset::AssetId
     **/
    XcmV1MultiassetAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    /**
     * Lookup85: xcm::v1::multiasset::Fungibility
     **/
    XcmV1MultiassetFungibility: {
        _enum: {
            Fungible: string;
            NonFungible: string;
        };
    };
    /**
     * Lookup86: xcm::v1::multiasset::AssetInstance
     **/
    XcmV1MultiassetAssetInstance: {
        _enum: {
            Undefined: string;
            Index: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
            Blob: string;
        };
    };
    /**
     * Lookup89: xcm::v2::Response
     **/
    XcmV2Response: {
        _enum: {
            Null: string;
            Assets: string;
            ExecutionResult: string;
            Version: string;
        };
    };
    /**
     * Lookup92: xcm::v0::OriginKind
     **/
    XcmV0OriginKind: {
        _enum: string[];
    };
    /**
     * Lookup93: xcm::double_encoded::DoubleEncoded<T>
     **/
    XcmDoubleEncoded: {
        encoded: string;
    };
    /**
     * Lookup94: xcm::v1::multiasset::MultiAssetFilter
     **/
    XcmV1MultiassetMultiAssetFilter: {
        _enum: {
            Definite: string;
            Wild: string;
        };
    };
    /**
     * Lookup95: xcm::v1::multiasset::WildMultiAsset
     **/
    XcmV1MultiassetWildMultiAsset: {
        _enum: {
            All: string;
            AllOf: {
                id: string;
                fun: string;
            };
        };
    };
    /**
     * Lookup96: xcm::v1::multiasset::WildFungibility
     **/
    XcmV1MultiassetWildFungibility: {
        _enum: string[];
    };
    /**
     * Lookup97: xcm::v2::WeightLimit
     **/
    XcmV2WeightLimit: {
        _enum: {
            Unlimited: string;
            Limited: string;
        };
    };
    /**
     * Lookup99: xcm::VersionedMultiAssets
     **/
    XcmVersionedMultiAssets: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup101: xcm::v0::multi_asset::MultiAsset
     **/
    XcmV0MultiAsset: {
        _enum: {
            None: string;
            All: string;
            AllFungible: string;
            AllNonFungible: string;
            AllAbstractFungible: {
                id: string;
            };
            AllAbstractNonFungible: {
                class: string;
            };
            AllConcreteFungible: {
                id: string;
            };
            AllConcreteNonFungible: {
                class: string;
            };
            AbstractFungible: {
                id: string;
                amount: string;
            };
            AbstractNonFungible: {
                class: string;
                instance: string;
            };
            ConcreteFungible: {
                id: string;
                amount: string;
            };
            ConcreteNonFungible: {
                class: string;
                instance: string;
            };
        };
    };
    /**
     * Lookup102: xcm::v0::multi_location::MultiLocation
     **/
    XcmV0MultiLocation: {
        _enum: {
            Null: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup103: xcm::v0::junction::Junction
     **/
    XcmV0Junction: {
        _enum: {
            Parent: string;
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /**
     * Lookup104: xcm::VersionedMultiLocation
     **/
    XcmVersionedMultiLocation: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup105: cumulus_pallet_xcm::pallet::Event<T>
     **/
    CumulusPalletXcmEvent: {
        _enum: {
            InvalidFormat: string;
            UnsupportedVersion: string;
            ExecutedDownward: string;
        };
    };
    /**
     * Lookup106: cumulus_pallet_dmp_queue::pallet::Event<T>
     **/
    CumulusPalletDmpQueueEvent: {
        _enum: {
            InvalidFormat: string;
            UnsupportedVersion: string;
            ExecutedDownward: string;
            WeightExhausted: string;
            OverweightEnqueued: string;
            OverweightServiced: string;
        };
    };
    /**
     * Lookup107: orml_xtokens::module::Event<T>
     **/
    OrmlXtokensModuleEvent: {
        _enum: {
            TransferredMultiAssets: {
                sender: string;
                assets: string;
                fee: string;
                dest: string;
            };
        };
    };
    /**
     * Lookup108: orml_unknown_tokens::module::Event
     **/
    OrmlUnknownTokensModuleEvent: {
        _enum: {
            Deposited: {
                asset: string;
                who: string;
            };
            Withdrawn: {
                asset: string;
                who: string;
            };
        };
    };
    /**
     * Lookup109: orml_xcm::module::Event<T>
     **/
    OrmlXcmModuleEvent: {
        _enum: {
            Sent: {
                to: string;
                message: string;
            };
        };
    };
    /**
     * Lookup110: orml_authority::module::Event<T>
     **/
    OrmlAuthorityModuleEvent: {
        _enum: {
            Dispatched: {
                result: string;
            };
            Scheduled: {
                origin: string;
                index: string;
            };
            FastTracked: {
                origin: string;
                index: string;
                when: string;
            };
            Delayed: {
                origin: string;
                index: string;
                when: string;
            };
            Cancelled: {
                origin: string;
                index: string;
            };
            AuthorizedCall: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                caller: string;
            };
            RemovedAuthorizedCall: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            TriggeredCallBy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                caller: string;
            };
        };
    };
    /**
     * Lookup111: karura_runtime::OriginCaller
     **/
    KaruraRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            __Unused4: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            Void: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            __Unused15: string;
            __Unused16: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            __Unused26: string;
            __Unused27: string;
            __Unused28: string;
            __Unused29: string;
            __Unused30: string;
            __Unused31: string;
            __Unused32: string;
            __Unused33: string;
            __Unused34: string;
            __Unused35: string;
            __Unused36: string;
            __Unused37: string;
            __Unused38: string;
            __Unused39: string;
            __Unused40: string;
            __Unused41: string;
            __Unused42: string;
            __Unused43: string;
            __Unused44: string;
            __Unused45: string;
            __Unused46: string;
            __Unused47: string;
            __Unused48: string;
            __Unused49: string;
            __Unused50: string;
            PolkadotXcm: string;
            CumulusXcm: string;
            __Unused53: string;
            __Unused54: string;
            __Unused55: string;
            __Unused56: string;
            __Unused57: string;
            __Unused58: string;
            __Unused59: string;
            Authority: string;
            GeneralCouncil: string;
            __Unused62: string;
            FinancialCouncil: string;
            __Unused64: string;
            HomaCouncil: string;
            __Unused66: string;
            TechnicalCommittee: string;
        };
    };
    /**
     * Lookup112: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup113: pallet_xcm::pallet::Origin
     **/
    PalletXcmOrigin: {
        _enum: {
            Xcm: string;
            Response: string;
        };
    };
    /**
     * Lookup114: cumulus_pallet_xcm::pallet::Origin
     **/
    CumulusPalletXcmOrigin: {
        _enum: {
            Relay: string;
            SiblingParachain: string;
        };
    };
    /**
     * Lookup115: orml_authority::DelayedOrigin<BlockNumber, karura_runtime::OriginCaller>
     **/
    OrmlAuthorityDelayedOrigin: {
        delay: string;
        origin: string;
    };
    /**
     * Lookup116: pallet_collective::RawOrigin<sp_core::crypto::AccountId32, I>
     **/
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /**
     * Lookup120: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup122: pallet_collective::pallet::Event<T, I>
     **/
    PalletCollectiveEvent: {
        _enum: {
            Proposed: {
                account: string;
                proposalIndex: string;
                proposalHash: string;
                threshold: string;
            };
            Voted: {
                account: string;
                proposalHash: string;
                voted: string;
                yes: string;
                no: string;
            };
            Approved: {
                proposalHash: string;
            };
            Disapproved: {
                proposalHash: string;
            };
            Executed: {
                proposalHash: string;
                result: string;
            };
            MemberExecuted: {
                proposalHash: string;
                result: string;
            };
            Closed: {
                proposalHash: string;
                yes: string;
                no: string;
            };
        };
    };
    /**
     * Lookup124: pallet_membership::pallet::Event<T, I>
     **/
    PalletMembershipEvent: {
        _enum: string[];
    };
    /**
     * Lookup131: pallet_democracy::pallet::Event<T>
     **/
    PalletDemocracyEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
                deposit: string;
            };
            Tabled: {
                proposalIndex: string;
                deposit: string;
                depositors: string;
            };
            ExternalTabled: string;
            Started: {
                refIndex: string;
                threshold: string;
            };
            Passed: {
                refIndex: string;
            };
            NotPassed: {
                refIndex: string;
            };
            Cancelled: {
                refIndex: string;
            };
            Executed: {
                refIndex: string;
                result: string;
            };
            Delegated: {
                who: string;
                target: string;
            };
            Undelegated: {
                account: string;
            };
            Vetoed: {
                who: string;
                proposalHash: string;
                until: string;
            };
            PreimageNoted: {
                proposalHash: string;
                who: string;
                deposit: string;
            };
            PreimageUsed: {
                proposalHash: string;
                provider: string;
                deposit: string;
            };
            PreimageInvalid: {
                proposalHash: string;
                refIndex: string;
            };
            PreimageMissing: {
                proposalHash: string;
                refIndex: string;
            };
            PreimageReaped: {
                proposalHash: string;
                provider: string;
                deposit: string;
                reaper: string;
            };
            Blacklisted: {
                proposalHash: string;
            };
            Voted: {
                voter: string;
                refIndex: string;
                vote: string;
            };
            Seconded: {
                seconder: string;
                propIndex: string;
            };
        };
    };
    /**
     * Lookup132: pallet_democracy::vote_threshold::VoteThreshold
     **/
    PalletDemocracyVoteThreshold: {
        _enum: string[];
    };
    /**
     * Lookup133: pallet_democracy::vote::AccountVote<Balance>
     **/
    PalletDemocracyVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
        };
    };
    /**
     * Lookup135: orml_oracle::module::Event<T, I>
     **/
    OrmlOracleModuleEvent: {
        _enum: {
            NewFeedData: {
                sender: string;
                values: string;
            };
        };
    };
    /**
     * Lookup139: orml_auction::module::Event<T>
     **/
    OrmlAuctionModuleEvent: {
        _enum: {
            Bid: {
                auctionId: string;
                bidder: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup140: module_prices::module::Event<T>
     **/
    ModulePricesModuleEvent: {
        _enum: {
            LockPrice: {
                currencyId: string;
                lockedPrice: string;
            };
            UnlockPrice: {
                currencyId: string;
            };
        };
    };
    /**
     * Lookup141: module_dex::module::Event<T>
     **/
    ModuleDexModuleEvent: {
        _enum: {
            AddProvision: {
                who: string;
                currency0: string;
                contribution0: string;
                currency1: string;
                contribution1: string;
            };
            AddLiquidity: {
                who: string;
                currency0: string;
                pool0: string;
                currency1: string;
                pool1: string;
                shareIncrement: string;
            };
            RemoveLiquidity: {
                who: string;
                currency0: string;
                pool0: string;
                currency1: string;
                pool1: string;
                shareDecrement: string;
            };
            Swap: {
                trader: string;
                path: string;
                liquidityChanges: string;
            };
            EnableTradingPair: {
                tradingPair: string;
            };
            ListProvisioning: {
                tradingPair: string;
            };
            DisableTradingPair: {
                tradingPair: string;
            };
            ProvisioningToEnabled: {
                tradingPair: string;
                pool0: string;
                pool1: string;
                shareAmount: string;
            };
            RefundProvision: {
                who: string;
                currency0: string;
                contribution0: string;
                currency1: string;
                contribution1: string;
            };
            ProvisioningAborted: {
                tradingPair: string;
                accumulatedProvision0: string;
                accumulatedProvision1: string;
            };
        };
    };
    /**
     * Lookup143: acala_primitives::TradingPair
     **/
    AcalaPrimitivesTradingPair: string;
    /**
     * Lookup144: module_auction_manager::module::Event<T>
     **/
    ModuleAuctionManagerModuleEvent: {
        _enum: {
            NewCollateralAuction: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                targetBidPrice: string;
            };
            CancelAuction: {
                auctionId: string;
            };
            CollateralAuctionDealt: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                winner: string;
                paymentAmount: string;
            };
            DEXTakeCollateralAuction: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                supplyCollateralAmount: string;
                targetStableAmount: string;
            };
            CollateralAuctionAborted: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                targetStableAmount: string;
                refundRecipient: string;
            };
        };
    };
    /**
     * Lookup145: module_loans::module::Event<T>
     **/
    ModuleLoansModuleEvent: {
        _enum: {
            PositionUpdated: {
                owner: string;
                collateralType: string;
                collateralAdjustment: string;
                debitAdjustment: string;
            };
            ConfiscateCollateralAndDebit: {
                owner: string;
                collateralType: string;
                confiscatedCollateralAmount: string;
                deductDebitAmount: string;
            };
            TransferLoan: {
                from: string;
                to: string;
                currencyId: string;
            };
        };
    };
    /**
     * Lookup146: module_honzon::module::Event<T>
     **/
    ModuleHonzonModuleEvent: {
        _enum: {
            Authorization: {
                authorizer: string;
                authorizee: string;
                collateralType: string;
            };
            UnAuthorization: {
                authorizer: string;
                authorizee: string;
                collateralType: string;
            };
            UnAuthorizationAll: {
                authorizer: string;
            };
        };
    };
    /**
     * Lookup147: module_cdp_treasury::module::Event<T>
     **/
    ModuleCdpTreasuryModuleEvent: {
        _enum: {
            ExpectedCollateralAuctionSizeUpdated: {
                collateralType: string;
                newSize: string;
            };
        };
    };
    /**
     * Lookup148: module_cdp_engine::module::Event<T>
     **/
    ModuleCdpEngineModuleEvent: {
        _enum: {
            LiquidateUnsafeCDP: {
                collateralType: string;
                owner: string;
                collateralAmount: string;
                badDebtValue: string;
                targetAmount: string;
            };
            SettleCDPInDebit: {
                collateralType: string;
                owner: string;
            };
            CloseCDPInDebitByDEX: {
                collateralType: string;
                owner: string;
                soldCollateralAmount: string;
                refundCollateralAmount: string;
                debitValue: string;
            };
            InterestRatePerSecUpdated: {
                collateralType: string;
                newInterestRatePerSec: string;
            };
            LiquidationRatioUpdated: {
                collateralType: string;
                newLiquidationRatio: string;
            };
            LiquidationPenaltyUpdated: {
                collateralType: string;
                newLiquidationPenalty: string;
            };
            RequiredCollateralRatioUpdated: {
                collateralType: string;
                newRequiredCollateralRatio: string;
            };
            MaximumTotalDebitValueUpdated: {
                collateralType: string;
                newTotalDebitValue: string;
            };
            GlobalInterestRatePerSecUpdated: {
                newGlobalInterestRatePerSec: string;
            };
        };
    };
    /**
     * Lookup150: module_emergency_shutdown::module::Event<T>
     **/
    ModuleEmergencyShutdownModuleEvent: {
        _enum: {
            Shutdown: {
                blockNumber: string;
            };
            OpenRefund: {
                blockNumber: string;
            };
            Refund: {
                who: string;
                stableCoinAmount: string;
                refundList: string;
            };
        };
    };
    /**
     * Lookup153: module_honzon_bridge::module::Event<T>
     **/
    ModuleHonzonBridgeModuleEvent: {
        _enum: {
            ToBridged: {
                who: string;
                amount: string;
            };
            FromBridged: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup154: module_homa::module::Event<T>
     **/
    ModuleHomaModuleEvent: {
        _enum: {
            Minted: {
                minter: string;
                stakingCurrencyAmount: string;
                liquidAmountReceived: string;
                liquidAmountAddedToVoid: string;
            };
            RequestedRedeem: {
                redeemer: string;
                liquidAmount: string;
                allowFastMatch: string;
            };
            RedeemRequestCancelled: {
                redeemer: string;
                cancelledLiquidAmount: string;
            };
            RedeemedByFastMatch: {
                redeemer: string;
                matchedLiquidAmount: string;
                feeInLiquid: string;
                redeemedStakingAmount: string;
            };
            RedeemedByUnbond: {
                redeemer: string;
                eraIndexWhenUnbond: string;
                liquidAmount: string;
                unbondingStakingAmount: string;
            };
            WithdrawRedemption: {
                redeemer: string;
                redemptionAmount: string;
            };
            CurrentEraBumped: {
                newEraIndex: string;
            };
            CurrentEraReset: {
                newEraIndex: string;
            };
            LedgerBondedReset: {
                subAccountIndex: string;
                newBondedAmount: string;
            };
            LedgerUnlockingReset: {
                subAccountIndex: string;
                newUnlocking: string;
            };
            SoftBondedCapPerSubAccountUpdated: {
                capAmount: string;
            };
            EstimatedRewardRatePerEraUpdated: {
                rewardRate: string;
            };
            CommissionRateUpdated: {
                commissionRate: string;
            };
            FastMatchFeeRateUpdated: {
                fastMatchFeeRate: string;
            };
            LastEraBumpedBlockUpdated: {
                lastEraBumpedBlock: string;
            };
            BumpEraFrequencyUpdated: {
                frequency: string;
            };
        };
    };
    /**
     * Lookup156: module_homa::module::UnlockChunk
     **/
    ModuleHomaModuleUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup157: module_xcm_interface::module::Event<T>
     **/
    ModuleXcmInterfaceModuleEvent: {
        _enum: {
            XcmDestWeightUpdated: {
                xcmOperation: string;
                newXcmDestWeight: string;
            };
            XcmFeeUpdated: {
                xcmOperation: string;
                newXcmDestWeight: string;
            };
        };
    };
    /**
     * Lookup158: module_xcm_interface::module::XcmInterfaceOperation
     **/
    ModuleXcmInterfaceModuleXcmInterfaceOperation: {
        _enum: {
            XtokensTransfer: string;
            HomaWithdrawUnbonded: string;
            HomaBondExtra: string;
            HomaUnbond: string;
            ParachainFee: string;
        };
    };
    /**
     * Lookup159: module_incentives::module::Event<T>
     **/
    ModuleIncentivesModuleEvent: {
        _enum: {
            DepositDexShare: {
                who: string;
                dexShareType: string;
                deposit: string;
            };
            WithdrawDexShare: {
                who: string;
                dexShareType: string;
                withdraw: string;
            };
            ClaimRewards: {
                who: string;
                pool: string;
                rewardCurrencyId: string;
                actualAmount: string;
                deductionAmount: string;
            };
            IncentiveRewardAmountUpdated: {
                pool: string;
                rewardCurrencyId: string;
                rewardAmountPerPeriod: string;
            };
            SavingRewardRateUpdated: {
                pool: string;
                rewardRatePerPeriod: string;
            };
            ClaimRewardDeductionRateUpdated: {
                pool: string;
                deductionRate: string;
            };
        };
    };
    /**
     * Lookup160: module_incentives::PoolId
     **/
    ModuleIncentivesPoolId: {
        _enum: {
            Loans: string;
            Dex: string;
        };
    };
    /**
     * Lookup161: module_nft::module::Event<T>
     **/
    ModuleNftModuleEvent: {
        _enum: {
            CreatedClass: {
                owner: string;
                classId: string;
            };
            MintedToken: {
                from: string;
                to: string;
                classId: string;
                quantity: string;
            };
            TransferredToken: {
                from: string;
                to: string;
                classId: string;
                tokenId: string;
            };
            BurnedToken: {
                owner: string;
                classId: string;
                tokenId: string;
            };
            BurnedTokenWithRemark: {
                owner: string;
                classId: string;
                tokenId: string;
                remarkHash: string;
            };
            DestroyedClass: {
                owner: string;
                classId: string;
            };
        };
    };
    /**
     * Lookup162: module_asset_registry::module::Event<T>
     **/
    ModuleAssetRegistryModuleEvent: {
        _enum: {
            ForeignAssetRegistered: {
                assetId: string;
                assetAddress: string;
                metadata: string;
            };
            ForeignAssetUpdated: {
                assetId: string;
                assetAddress: string;
                metadata: string;
            };
            AssetRegistered: {
                assetId: string;
                metadata: string;
            };
            AssetUpdated: {
                assetId: string;
                metadata: string;
            };
        };
    };
    /**
     * Lookup163: module_asset_registry::module::AssetMetadata<Balance>
     **/
    ModuleAssetRegistryModuleAssetMetadata: {
        name: string;
        symbol: string;
        decimals: string;
        minimalBalance: string;
    };
    /**
     * Lookup164: module_asset_registry::module::AssetIds
     **/
    ModuleAssetRegistryModuleAssetIds: {
        _enum: {
            Erc20: string;
            StableAssetId: string;
            ForeignAssetId: string;
            NativeAssetId: string;
        };
    };
    /**
     * Lookup165: module_evm::module::Event<T>
     **/
    ModuleEvmModuleEvent: {
        _enum: {
            Created: {
                from: string;
                contract: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            CreatedFailed: {
                from: string;
                contract: string;
                exitReason: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            Executed: {
                from: string;
                contract: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            ExecutedFailed: {
                from: string;
                contract: string;
                exitReason: string;
                output: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            TransferredMaintainer: {
                contract: string;
                newMaintainer: string;
            };
            ContractDevelopmentEnabled: {
                who: string;
            };
            ContractDevelopmentDisabled: {
                who: string;
            };
            ContractPublished: {
                contract: string;
            };
            ContractSetCode: {
                contract: string;
            };
            ContractSelfdestructed: {
                contract: string;
            };
        };
    };
    /**
     * Lookup167: ethereum::log::Log
     **/
    EthereumLog: {
        address: string;
        topics: string;
        data: string;
    };
    /**
     * Lookup170: evm_core::error::ExitReason
     **/
    EvmCoreErrorExitReason: {
        _enum: {
            Succeed: string;
            Error: string;
            Revert: string;
            Fatal: string;
        };
    };
    /**
     * Lookup171: evm_core::error::ExitSucceed
     **/
    EvmCoreErrorExitSucceed: {
        _enum: string[];
    };
    /**
     * Lookup172: evm_core::error::ExitError
     **/
    EvmCoreErrorExitError: {
        _enum: {
            StackUnderflow: string;
            StackOverflow: string;
            InvalidJump: string;
            InvalidRange: string;
            DesignatedInvalid: string;
            CallTooDeep: string;
            CreateCollision: string;
            CreateContractLimit: string;
            InvalidCode: string;
            OutOfOffset: string;
            OutOfGas: string;
            OutOfFund: string;
            PCUnderflow: string;
            CreateEmpty: string;
            Other: string;
        };
    };
    /**
     * Lookup175: evm_core::error::ExitRevert
     **/
    EvmCoreErrorExitRevert: {
        _enum: string[];
    };
    /**
     * Lookup176: evm_core::error::ExitFatal
     **/
    EvmCoreErrorExitFatal: {
        _enum: {
            NotSupported: string;
            UnhandledInterrupt: string;
            CallErrorAsFatal: string;
            Other: string;
        };
    };
    /**
     * Lookup177: module_evm_accounts::module::Event<T>
     **/
    ModuleEvmAccountsModuleEvent: {
        _enum: {
            ClaimAccount: {
                accountId: string;
                evmAddress: string;
            };
        };
    };
    /**
     * Lookup178: nutsfinance_stable_asset::pallet::Event<T>
     **/
    NutsfinanceStableAssetEvent: {
        _enum: {
            CreatePool: {
                poolId: string;
                a: string;
                swapId: string;
                palletId: string;
            };
            Minted: {
                minter: string;
                poolId: string;
                a: string;
                inputAmounts: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmount: string;
            };
            TokenSwapped: {
                swapper: string;
                poolId: string;
                a: string;
                inputAsset: string;
                outputAsset: string;
                inputAmount: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                outputAmount: string;
            };
            RedeemedProportion: {
                redeemer: string;
                poolId: string;
                a: string;
                inputAmount: string;
                minOutputAmounts: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmounts: string;
            };
            RedeemedSingle: {
                redeemer: string;
                poolId: string;
                a: string;
                inputAmount: string;
                outputAsset: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmount: string;
            };
            RedeemedMulti: {
                redeemer: string;
                poolId: string;
                a: string;
                outputAmounts: string;
                maxInputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                inputAmount: string;
            };
            BalanceUpdated: {
                poolId: string;
                oldBalances: string;
                newBalances: string;
            };
            YieldCollected: {
                poolId: string;
                a: string;
                oldTotalSupply: string;
                newTotalSupply: string;
                who: string;
                amount: string;
            };
            FeeCollected: {
                poolId: string;
                a: string;
                oldBalances: string;
                newBalances: string;
                oldTotalSupply: string;
                newTotalSupply: string;
                who: string;
                amount: string;
            };
            AModified: {
                poolId: string;
                value: string;
                time: string;
            };
        };
    };
    /**
     * Lookup179: cumulus_pallet_parachain_system::pallet::Event<T>
     **/
    CumulusPalletParachainSystemEvent: {
        _enum: {
            ValidationFunctionStored: string;
            ValidationFunctionApplied: string;
            ValidationFunctionDiscarded: string;
            UpgradeAuthorized: string;
            DownwardMessagesReceived: string;
            DownwardMessagesProcessed: string;
        };
    };
    /**
     * Lookup180: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /**
     * Lookup181: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup183: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup184: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup189: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup190: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup191: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup193: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup194: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup195: frame_support::weights::RuntimeDbWeight
     **/
    FrameSupportWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup196: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup200: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup201: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup204: pallet_scheduler::ScheduledV3<frame_support::traits::schedule::MaybeHashed<karura_runtime::Call, primitive_types::H256>, BlockNumber, karura_runtime::OriginCaller, sp_core::crypto::AccountId32>
     **/
    PalletSchedulerScheduledV3: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup205: frame_support::traits::schedule::MaybeHashed<karura_runtime::Call, primitive_types::H256>
     **/
    FrameSupportScheduleMaybeHashed: {
        _enum: {
            Value: string;
            Hash: string;
        };
    };
    /**
     * Lookup207: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup209: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
        };
    };
    /**
     * Lookup211: pallet_multisig::pallet::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                storeCall: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup214: pallet_proxy::pallet::Call<T>
     **/
    PalletProxyCall: {
        _enum: {
            proxy: {
                real: string;
                forceProxyType: string;
                call: string;
            };
            add_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxies: string;
            anonymous: {
                proxyType: string;
                delay: string;
                index: string;
            };
            kill_anonymous: {
                spawner: string;
                proxyType: string;
                index: string;
                height: string;
                extIndex: string;
            };
            announce: {
                real: string;
                callHash: string;
            };
            remove_announcement: {
                real: string;
                callHash: string;
            };
            reject_announcement: {
                delegate: string;
                callHash: string;
            };
            proxy_announced: {
                delegate: string;
                real: string;
                forceProxyType: string;
                call: string;
            };
        };
    };
    /**
     * Lookup216: module_transaction_pause::module::Call<T>
     **/
    ModuleTransactionPauseModuleCall: {
        _enum: {
            pause_transaction: {
                palletName: string;
                functionName: string;
            };
            unpause_transaction: {
                palletName: string;
                functionName: string;
            };
        };
    };
    /**
     * Lookup217: module_idle_scheduler::module::Call<T>
     **/
    ModuleIdleSchedulerModuleCall: {
        _enum: {
            schedule_task: {
                task: string;
            };
        };
    };
    /**
     * Lookup218: karura_runtime::ScheduledTasks
     **/
    KaruraRuntimeScheduledTasks: {
        _enum: {
            EvmTask: string;
        };
    };
    /**
     * Lookup219: module_evm::EvmTask<karura_runtime::Runtime>
     **/
    ModuleEvmEvmTask: {
        _enum: {
            Schedule: {
                from: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
            };
            Remove: {
                caller: string;
                contract: string;
                maintainer: string;
            };
        };
    };
    /**
     * Lookup220: karura_runtime::Runtime
     **/
    KaruraRuntimeRuntime: string;
    /**
     * Lookup221: pallet_preimage::pallet::Call<T>
     **/
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup222: pallet_balances::pallet::Call<T, I>
     **/
    PalletBalancesCall: {
        _enum: {
            transfer: {
                dest: string;
                value: string;
            };
            set_balance: {
                who: string;
                newFree: string;
                newReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
            force_unreserve: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup224: module_currencies::module::Call<T>
     **/
    ModuleCurrenciesModuleCall: {
        _enum: {
            transfer: {
                dest: string;
                currencyId: string;
                amount: string;
            };
            transfer_native_currency: {
                dest: string;
                amount: string;
            };
            update_balance: {
                who: string;
                currencyId: string;
                amount: string;
            };
            sweep_dust: {
                currencyId: string;
                accounts: string;
            };
        };
    };
    /**
     * Lookup225: orml_vesting::module::Call<T>
     **/
    OrmlVestingModuleCall: {
        _enum: {
            claim: string;
            vested_transfer: {
                dest: string;
                schedule: string;
            };
            update_vesting_schedules: {
                who: string;
                vestingSchedules: string;
            };
            claim_for: {
                dest: string;
            };
        };
    };
    /**
     * Lookup227: module_transaction_payment::module::Call<T>
     **/
    ModuleTransactionPaymentModuleCall: {
        _enum: {
            set_alternative_fee_swap_path: {
                feeSwapPath: string;
            };
            enable_charge_fee_pool: {
                currencyId: string;
                swapPath: string;
                poolSize: string;
                swapThreshold: string;
            };
            disable_charge_fee_pool: {
                currencyId: string;
            };
            with_fee_path: {
                feeSwapPath: string;
                call: string;
            };
            with_fee_currency: {
                currencyId: string;
                call: string;
            };
        };
    };
    /**
     * Lookup229: pallet_treasury::pallet::Call<T, I>
     **/
    PalletTreasuryCall: {
        _enum: {
            propose_spend: {
                value: string;
                beneficiary: string;
            };
            reject_proposal: {
                proposalId: string;
            };
            approve_proposal: {
                proposalId: string;
            };
        };
    };
    /**
     * Lookup230: pallet_bounties::pallet::Call<T>
     **/
    PalletBountiesCall: {
        _enum: {
            propose_bounty: {
                value: string;
                description: string;
            };
            approve_bounty: {
                bountyId: string;
            };
            propose_curator: {
                bountyId: string;
                curator: string;
                fee: string;
            };
            unassign_curator: {
                bountyId: string;
            };
            accept_curator: {
                bountyId: string;
            };
            award_bounty: {
                bountyId: string;
                beneficiary: string;
            };
            claim_bounty: {
                bountyId: string;
            };
            close_bounty: {
                bountyId: string;
            };
            extend_bounty_expiry: {
                bountyId: string;
                remark: string;
            };
        };
    };
    /**
     * Lookup231: pallet_tips::pallet::Call<T>
     **/
    PalletTipsCall: {
        _enum: {
            report_awesome: {
                reason: string;
                who: string;
            };
            retract_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            tip_new: {
                reason: string;
                who: string;
                tipValue: string;
            };
            tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                tipValue: string;
            };
            close_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            slash_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup232: module_collator_selection::pallet::Call<T>
     **/
    ModuleCollatorSelectionCall: {
        _enum: {
            set_invulnerables: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_desired_candidates: {
                max: string;
            };
            set_candidacy_bond: {
                bond: string;
            };
            register_as_candidate: string;
            register_candidate: {
                newCandidate: string;
            };
            leave_intent: string;
            withdraw_bond: string;
        };
    };
    /**
     * Lookup233: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup234: karura_runtime::SessionKeys
     **/
    KaruraRuntimeSessionKeys: {
        aura: string;
    };
    /**
     * Lookup235: sp_consensus_aura::sr25519::app_sr25519::Public
     **/
    SpConsensusAuraSr25519AppSr25519Public: string;
    /**
     * Lookup236: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup237: module_session_manager::module::Call<T>
     **/
    ModuleSessionManagerModuleCall: {
        _enum: {
            schedule_session_duration: {
                startSession: string;
                duration: string;
            };
        };
    };
    /**
     * Lookup238: cumulus_pallet_xcmp_queue::pallet::Call<T>
     **/
    CumulusPalletXcmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
            suspend_xcm_execution: string;
            resume_xcm_execution: string;
            update_suspend_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_drop_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_resume_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_threshold_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_weight_restrict_decay: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_xcmp_max_individual_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /**
     * Lookup239: pallet_xcm::pallet::Call<T>
     **/
    PalletXcmCall: {
        _enum: {
            send: {
                dest: string;
                message: string;
            };
            teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            execute: {
                message: string;
                maxWeight: string;
            };
            force_xcm_version: {
                location: string;
                xcmVersion: string;
            };
            force_default_xcm_version: {
                maybeXcmVersion: string;
            };
            force_subscribe_version_notify: {
                location: string;
            };
            force_unsubscribe_version_notify: {
                location: string;
            };
            limited_reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
            limited_teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
        };
    };
    /**
     * Lookup240: xcm::VersionedXcm<Call>
     **/
    XcmVersionedXcm: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    /**
     * Lookup241: xcm::v0::Xcm<Call>
     **/
    XcmV0Xcm: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposit: {
                assets: string;
                effects: string;
            };
            TeleportAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                dest: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
        };
    };
    /**
     * Lookup243: xcm::v0::order::Order<Call>
     **/
    XcmV0Order: {
        _enum: {
            Null: string;
            DepositAsset: {
                assets: string;
                dest: string;
            };
            DepositReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                xcm: string;
            };
        };
    };
    /**
     * Lookup245: xcm::v0::Response
     **/
    XcmV0Response: {
        _enum: {
            Assets: string;
        };
    };
    /**
     * Lookup246: xcm::v1::Xcm<Call>
     **/
    XcmV1Xcm: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposited: {
                assets: string;
                effects: string;
            };
            ReceiveTeleportedAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
        };
    };
    /**
     * Lookup248: xcm::v1::order::Order<Call>
     **/
    XcmV1Order: {
        _enum: {
            Noop: string;
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                instructions: string;
            };
        };
    };
    /**
     * Lookup250: xcm::v1::Response
     **/
    XcmV1Response: {
        _enum: {
            Assets: string;
            Version: string;
        };
    };
    /**
     * Lookup265: cumulus_pallet_dmp_queue::pallet::Call<T>
     **/
    CumulusPalletDmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
        };
    };
    /**
     * Lookup266: orml_xtokens::module::Call<T>
     **/
    OrmlXtokensModuleCall: {
        _enum: {
            transfer: {
                currencyId: string;
                amount: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiasset: {
                asset: string;
                dest: string;
                destWeight: string;
            };
            transfer_with_fee: {
                currencyId: string;
                amount: string;
                fee: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiasset_with_fee: {
                asset: string;
                fee: string;
                dest: string;
                destWeight: string;
            };
            transfer_multicurrencies: {
                currencies: string;
                feeItem: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiassets: {
                assets: string;
                feeItem: string;
                dest: string;
                destWeight: string;
            };
        };
    };
    /**
     * Lookup267: xcm::VersionedMultiAsset
     **/
    XcmVersionedMultiAsset: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup268: orml_xcm::module::Call<T>
     **/
    OrmlXcmModuleCall: {
        _enum: {
            send_as_sovereign: {
                dest: string;
                message: string;
            };
        };
    };
    /**
     * Lookup269: orml_authority::module::Call<T>
     **/
    OrmlAuthorityModuleCall: {
        _enum: {
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            schedule_dispatch: {
                when: string;
                priority: string;
                withDelayedOrigin: string;
                call: string;
            };
            fast_track_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
                when: string;
            };
            delay_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
                additionalDelay: string;
            };
            cancel_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
            };
            authorize_call: {
                call: string;
                caller: string;
            };
            remove_authorized_call: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            trigger_call: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                callWeightBound: string;
            };
        };
    };
    /**
     * Lookup270: acala_primitives::AuthoritysOriginId
     **/
    AcalaPrimitivesAuthoritysOriginId: {
        _enum: string[];
    };
    /**
     * Lookup271: frame_support::traits::schedule::DispatchTime<BlockNumber>
     **/
    FrameSupportScheduleDispatchTime: {
        _enum: {
            At: string;
            After: string;
        };
    };
    /**
     * Lookup272: pallet_collective::pallet::Call<T, I>
     **/
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
            disapprove_proposal: {
                proposalHash: string;
            };
        };
    };
    /**
     * Lookup273: pallet_membership::pallet::Call<T, I>
     **/
    PalletMembershipCall: {
        _enum: {
            add_member: {
                who: string;
            };
            remove_member: {
                who: string;
            };
            swap_member: {
                remove: string;
                add: string;
            };
            reset_members: {
                members: string;
            };
            change_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_prime: {
                who: string;
            };
            clear_prime: string;
        };
    };
    /**
     * Lookup280: pallet_democracy::pallet::Call<T>
     **/
    PalletDemocracyCall: {
        _enum: {
            propose: {
                proposalHash: string;
                value: string;
            };
            second: {
                proposal: string;
                secondsUpperBound: string;
            };
            vote: {
                refIndex: string;
                vote: string;
            };
            emergency_cancel: {
                refIndex: string;
            };
            external_propose: {
                proposalHash: string;
            };
            external_propose_majority: {
                proposalHash: string;
            };
            external_propose_default: {
                proposalHash: string;
            };
            fast_track: {
                proposalHash: string;
                votingPeriod: string;
                delay: string;
            };
            veto_external: {
                proposalHash: string;
            };
            cancel_referendum: {
                refIndex: string;
            };
            cancel_queued: {
                which: string;
            };
            delegate: {
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: string;
            clear_public_proposals: string;
            note_preimage: {
                encodedProposal: string;
            };
            note_preimage_operational: {
                encodedProposal: string;
            };
            note_imminent_preimage: {
                encodedProposal: string;
            };
            note_imminent_preimage_operational: {
                encodedProposal: string;
            };
            reap_preimage: {
                proposalHash: string;
                proposalLenUpperBound: string;
            };
            unlock: {
                target: string;
            };
            remove_vote: {
                index: string;
            };
            remove_other_vote: {
                target: string;
                index: string;
            };
            enact_proposal: {
                proposalHash: string;
                index: string;
            };
            blacklist: {
                proposalHash: string;
                maybeRefIndex: string;
            };
            cancel_proposal: {
                propIndex: string;
            };
        };
    };
    /**
     * Lookup281: pallet_democracy::conviction::Conviction
     **/
    PalletDemocracyConviction: {
        _enum: string[];
    };
    /**
     * Lookup282: orml_oracle::module::Call<T, I>
     **/
    OrmlOracleModuleCall: {
        _enum: {
            feed_values: {
                values: string;
            };
        };
    };
    /**
     * Lookup284: orml_auction::module::Call<T>
     **/
    OrmlAuctionModuleCall: {
        _enum: {
            bid: {
                id: string;
                value: string;
            };
        };
    };
    /**
     * Lookup285: orml_rewards::module::Call<T>
     **/
    OrmlRewardsModuleCall: string;
    /**
     * Lookup286: module_prices::module::Call<T>
     **/
    ModulePricesModuleCall: {
        _enum: {
            lock_price: {
                currencyId: string;
            };
            unlock_price: {
                currencyId: string;
            };
        };
    };
    /**
     * Lookup287: module_dex::module::Call<T>
     **/
    ModuleDexModuleCall: {
        _enum: {
            swap_with_exact_supply: {
                path: string;
                supplyAmount: string;
                minTargetAmount: string;
            };
            swap_with_exact_target: {
                path: string;
                targetAmount: string;
                maxSupplyAmount: string;
            };
            add_liquidity: {
                currencyIdA: string;
                currencyIdB: string;
                maxAmountA: string;
                maxAmountB: string;
                minShareIncrement: string;
                stakeIncrementShare: string;
            };
            add_provision: {
                currencyIdA: string;
                currencyIdB: string;
                amountA: string;
                amountB: string;
            };
            claim_dex_share: {
                owner: string;
                currencyIdA: string;
                currencyIdB: string;
            };
            remove_liquidity: {
                currencyIdA: string;
                currencyIdB: string;
                removeShare: string;
                minWithdrawnA: string;
                minWithdrawnB: string;
                byUnstake: string;
            };
            list_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
                minContributionA: string;
                minContributionB: string;
                targetProvisionA: string;
                targetProvisionB: string;
                notBefore: string;
            };
            update_provisioning_parameters: {
                currencyIdA: string;
                currencyIdB: string;
                minContributionA: string;
                minContributionB: string;
                targetProvisionA: string;
                targetProvisionB: string;
                notBefore: string;
            };
            end_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
            };
            enable_trading_pair: {
                currencyIdA: string;
                currencyIdB: string;
            };
            disable_trading_pair: {
                currencyIdA: string;
                currencyIdB: string;
            };
            refund_provision: {
                owner: string;
                currencyIdA: string;
                currencyIdB: string;
            };
            abort_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
            };
        };
    };
    /**
     * Lookup288: module_dex_oracle::module::Call<T>
     **/
    ModuleDexOracleModuleCall: {
        _enum: {
            enable_average_price: {
                currencyIdA: string;
                currencyIdB: string;
                interval: string;
            };
            disable_average_price: {
                currencyIdA: string;
                currencyIdB: string;
            };
            update_average_price_interval: {
                currencyIdA: string;
                currencyIdB: string;
                newInterval: string;
            };
        };
    };
    /**
     * Lookup289: module_auction_manager::module::Call<T>
     **/
    ModuleAuctionManagerModuleCall: {
        _enum: {
            cancel: {
                id: string;
            };
        };
    };
    /**
     * Lookup290: module_loans::module::Call<T>
     **/
    ModuleLoansModuleCall: string;
    /**
     * Lookup291: module_honzon::module::Call<T>
     **/
    ModuleHonzonModuleCall: {
        _enum: {
            adjust_loan: {
                currencyId: string;
                collateralAdjustment: string;
                debitAdjustment: string;
            };
            close_loan_has_debit_by_dex: {
                currencyId: string;
                maxCollateralAmount: string;
            };
            transfer_loan_from: {
                currencyId: string;
                from: string;
            };
            authorize: {
                currencyId: string;
                to: string;
            };
            unauthorize: {
                currencyId: string;
                to: string;
            };
            unauthorize_all: string;
            expand_position_collateral: {
                currencyId: string;
                increaseDebitValue: string;
                minIncreaseCollateral: string;
            };
            shrink_position_debit: {
                currencyId: string;
                decreaseCollateral: string;
                minDecreaseDebitValue: string;
            };
        };
    };
    /**
     * Lookup292: module_cdp_treasury::module::Call<T>
     **/
    ModuleCdpTreasuryModuleCall: {
        _enum: {
            extract_surplus_to_treasury: {
                amount: string;
            };
            auction_collateral: {
                currencyId: string;
                amount: string;
                target: string;
                splited: string;
            };
            exchange_collateral_to_stable: {
                currencyId: string;
                swapLimit: string;
            };
            set_expected_collateral_auction_size: {
                _alias: {
                    size_: string;
                };
                currencyId: string;
                size_: string;
            };
        };
    };
    /**
     * Lookup293: module_support::dex::SwapLimit<Balance>
     **/
    ModuleSupportDexSwapLimit: {
        _enum: {
            ExactSupply: string;
            ExactTarget: string;
        };
    };
    /**
     * Lookup294: module_cdp_engine::module::Call<T>
     **/
    ModuleCdpEngineModuleCall: {
        _enum: {
            liquidate: {
                currencyId: string;
                who: string;
            };
            settle: {
                currencyId: string;
                who: string;
            };
            set_global_params: {
                globalInterestRatePerSec: string;
            };
            set_collateral_params: {
                currencyId: string;
                interestRatePerSec: string;
                liquidationRatio: string;
                liquidationPenalty: string;
                requiredCollateralRatio: string;
                maximumTotalDebitValue: string;
            };
        };
    };
    /**
     * Lookup295: orml_traits::Change<Option<sp_arithmetic::fixed_point::FixedU128>>
     **/
    OrmlTraitsChangeOption: {
        _enum: {
            NoChange: string;
            NewValue: string;
        };
    };
    /**
     * Lookup296: orml_traits::Change<Value>
     **/
    OrmlTraitsChangeU128: {
        _enum: {
            NoChange: string;
            NewValue: string;
        };
    };
    /**
     * Lookup297: module_emergency_shutdown::module::Call<T>
     **/
    ModuleEmergencyShutdownModuleCall: {
        _enum: {
            emergency_shutdown: string;
            open_collateral_refund: string;
            refund_collaterals: {
                amount: string;
            };
        };
    };
    /**
     * Lookup298: module_honzon_bridge::module::Call<T>
     **/
    ModuleHonzonBridgeModuleCall: {
        _enum: {
            to_bridged: {
                amount: string;
            };
            from_bridged: {
                amount: string;
            };
        };
    };
    /**
     * Lookup299: module_homa::module::Call<T>
     **/
    ModuleHomaModuleCall: {
        _enum: {
            mint: {
                amount: string;
            };
            request_redeem: {
                amount: string;
                allowFastMatch: string;
            };
            fast_match_redeems: {
                redeemerList: string;
            };
            claim_redemption: {
                redeemer: string;
            };
            update_homa_params: {
                softBondedCapPerSubAccount: string;
                estimatedRewardRatePerEra: string;
                commissionRate: string;
                fastMatchFeeRate: string;
            };
            update_bump_era_params: {
                lastEraBumpedBlock: string;
                frequency: string;
            };
            reset_ledgers: {
                updates: string;
            };
            reset_current_era: {
                eraIndex: string;
            };
            force_bump_current_era: {
                bumpAmount: string;
            };
            fast_match_redeems_completely: {
                redeemerList: string;
            };
        };
    };
    /**
     * Lookup304: module_xcm_interface::module::Call<T>
     **/
    ModuleXcmInterfaceModuleCall: {
        _enum: {
            update_xcm_dest_weight_and_fee: {
                updates: string;
            };
        };
    };
    /**
     * Lookup307: module_incentives::module::Call<T>
     **/
    ModuleIncentivesModuleCall: {
        _enum: {
            deposit_dex_share: {
                lpCurrencyId: string;
                amount: string;
            };
            withdraw_dex_share: {
                lpCurrencyId: string;
                amount: string;
            };
            claim_rewards: {
                poolId: string;
            };
            update_incentive_rewards: {
                updates: string;
            };
            update_dex_saving_rewards: {
                updates: string;
            };
            update_claim_reward_deduction_rates: {
                updates: string;
            };
        };
    };
    /**
     * Lookup312: module_nft::module::Call<T>
     **/
    ModuleNftModuleCall: {
        _enum: {
            create_class: {
                metadata: string;
                properties: string;
                attributes: string;
            };
            mint: {
                to: string;
                classId: string;
                metadata: string;
                attributes: string;
                quantity: string;
            };
            transfer: {
                to: string;
                token: string;
            };
            burn: {
                token: string;
            };
            burn_with_remark: {
                token: string;
                remark: string;
            };
            destroy_class: {
                classId: string;
                dest: string;
            };
            update_class_properties: {
                classId: string;
                properties: string;
            };
        };
    };
    /**
     * Lookup314: acala_primitives::nft::ClassProperty
     **/
    AcalaPrimitivesNftClassProperty: {
        _enum: string[];
    };
    /**
     * Lookup317: module_asset_registry::module::Call<T>
     **/
    ModuleAssetRegistryModuleCall: {
        _enum: {
            register_foreign_asset: {
                location: string;
                metadata: string;
            };
            update_foreign_asset: {
                foreignAssetId: string;
                location: string;
                metadata: string;
            };
            register_stable_asset: {
                metadata: string;
            };
            update_stable_asset: {
                stableAssetId: string;
                metadata: string;
            };
            register_erc20_asset: {
                contract: string;
                minimalBalance: string;
            };
            update_erc20_asset: {
                contract: string;
                metadata: string;
            };
            register_native_asset: {
                currencyId: string;
                metadata: string;
            };
            update_native_asset: {
                currencyId: string;
                metadata: string;
            };
        };
    };
    /**
     * Lookup318: module_evm::module::Call<T>
     **/
    ModuleEvmModuleCall: {
        _enum: {
            eth_call: {
                action: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
                validUntil: string;
            };
            call: {
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            scheduled_call: {
                from: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create: {
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create2: {
                input: string;
                salt: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create_nft_contract: {
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create_predeploy_contract: {
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            transfer_maintainer: {
                contract: string;
                newMaintainer: string;
            };
            publish_contract: {
                contract: string;
            };
            publish_free: {
                contract: string;
            };
            enable_contract_development: string;
            disable_contract_development: string;
            set_code: {
                contract: string;
                code: string;
            };
            selfdestruct: {
                contract: string;
            };
        };
    };
    /**
     * Lookup319: ethereum::transaction::TransactionAction
     **/
    EthereumTransactionTransactionAction: {
        _enum: {
            Call: string;
            Create: string;
        };
    };
    /**
     * Lookup321: ethereum::transaction::AccessListItem
     **/
    EthereumTransactionAccessListItem: {
        address: string;
        storageKeys: string;
    };
    /**
     * Lookup322: module_evm_accounts::module::Call<T>
     **/
    ModuleEvmAccountsModuleCall: {
        _enum: {
            claim_account: {
                ethAddress: string;
                ethSignature: string;
            };
            claim_default_account: string;
        };
    };
    /**
     * Lookup324: nutsfinance_stable_asset::pallet::Call<T>
     **/
    NutsfinanceStableAssetCall: {
        _enum: {
            create_pool: {
                poolAsset: string;
                assets: string;
                precisions: string;
                mintFee: string;
                swapFee: string;
                redeemFee: string;
                initialA: string;
                feeRecipient: string;
                yieldRecipient: string;
                precision: string;
            };
            mint: {
                poolId: string;
                amounts: string;
                minMintAmount: string;
            };
            swap: {
                poolId: string;
                i: string;
                j: string;
                dx: string;
                minDy: string;
                assetLength: string;
            };
            redeem_proportion: {
                poolId: string;
                amount: string;
                minRedeemAmounts: string;
            };
            redeem_single: {
                poolId: string;
                amount: string;
                i: string;
                minRedeemAmount: string;
                assetLength: string;
            };
            redeem_multi: {
                poolId: string;
                amounts: string;
                maxRedeemAmount: string;
            };
            modify_a: {
                poolId: string;
                a: string;
                futureABlock: string;
            };
        };
    };
    /**
     * Lookup325: cumulus_pallet_parachain_system::pallet::Call<T>
     **/
    CumulusPalletParachainSystemCall: {
        _enum: {
            set_validation_data: {
                data: string;
            };
            sudo_send_upward_message: {
                message: string;
            };
            authorize_upgrade: {
                codeHash: string;
            };
            enact_authorized_upgrade: {
                code: string;
            };
        };
    };
    /**
     * Lookup326: cumulus_primitives_parachain_inherent::ParachainInherentData
     **/
    CumulusPrimitivesParachainInherentParachainInherentData: {
        validationData: string;
        relayChainState: string;
        downwardMessages: string;
        horizontalMessages: string;
    };
    /**
     * Lookup327: polkadot_primitives::v1::PersistedValidationData<primitive_types::H256, N>
     **/
    PolkadotPrimitivesV1PersistedValidationData: {
        parentHead: string;
        relayParentNumber: string;
        relayParentStorageRoot: string;
        maxPovSize: string;
    };
    /**
     * Lookup329: sp_trie::storage_proof::StorageProof
     **/
    SpTrieStorageProof: {
        trieNodes: string;
    };
    /**
     * Lookup331: polkadot_core_primitives::InboundDownwardMessage<BlockNumber>
     **/
    PolkadotCorePrimitivesInboundDownwardMessage: {
        sentAt: string;
        msg: string;
    };
    /**
     * Lookup334: polkadot_core_primitives::InboundHrmpMessage<BlockNumber>
     **/
    PolkadotCorePrimitivesInboundHrmpMessage: {
        sentAt: string;
        data: string;
    };
    /**
     * Lookup337: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup338: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup339: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup341: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /**
     * Lookup343: pallet_multisig::pallet::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup346: pallet_proxy::ProxyDefinition<sp_core::crypto::AccountId32, runtime_common::ProxyType, BlockNumber>
     **/
    PalletProxyProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    /**
     * Lookup350: pallet_proxy::Announcement<sp_core::crypto::AccountId32, primitive_types::H256, BlockNumber>
     **/
    PalletProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    /**
     * Lookup352: pallet_proxy::pallet::Error<T>
     **/
    PalletProxyError: {
        _enum: string[];
    };
    /**
     * Lookup353: module_transaction_pause::module::Error<T>
     **/
    ModuleTransactionPauseModuleError: {
        _enum: string[];
    };
    /**
     * Lookup354: pallet_preimage::RequestStatus<sp_core::crypto::AccountId32, Balance>
     **/
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: string;
            Requested: string;
        };
    };
    /**
     * Lookup358: pallet_preimage::pallet::Error<T>
     **/
    PalletPreimageError: {
        _enum: string[];
    };
    /**
     * Lookup360: pallet_balances::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup361: pallet_balances::Reasons
     **/
    PalletBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup364: pallet_balances::ReserveData<acala_primitives::ReserveIdentifier, Balance>
     **/
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup365: acala_primitives::ReserveIdentifier
     **/
    AcalaPrimitivesReserveIdentifier: {
        _enum: string[];
    };
    /**
     * Lookup367: pallet_balances::Releases
     **/
    PalletBalancesReleases: {
        _enum: string[];
    };
    /**
     * Lookup368: pallet_balances::pallet::Error<T, I>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup371: orml_tokens::BalanceLock<Balance>
     **/
    OrmlTokensBalanceLock: {
        id: string;
        amount: string;
    };
    /**
     * Lookup373: orml_tokens::AccountData<Balance>
     **/
    OrmlTokensAccountData: {
        free: string;
        reserved: string;
        frozen: string;
    };
    /**
     * Lookup374: orml_tokens::module::Error<T>
     **/
    OrmlTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup375: module_currencies::module::Error<T>
     **/
    ModuleCurrenciesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup377: orml_vesting::module::Error<T>
     **/
    OrmlVestingModuleError: {
        _enum: string[];
    };
    /**
     * Lookup379: frame_support::PalletId
     **/
    FrameSupportPalletId: string;
    /**
     * Lookup382: frame_support::weights::WeightToFeeCoefficient<Balance>
     **/
    FrameSupportWeightsWeightToFeeCoefficient: {
        coeffInteger: string;
        coeffFrac: string;
        negative: string;
        degree: string;
    };
    /**
     * Lookup383: module_transaction_payment::module::Error<T>
     **/
    ModuleTransactionPaymentModuleError: {
        _enum: string[];
    };
    /**
     * Lookup384: pallet_treasury::Proposal<sp_core::crypto::AccountId32, Balance>
     **/
    PalletTreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    /**
     * Lookup388: pallet_treasury::pallet::Error<T, I>
     **/
    PalletTreasuryError: {
        _enum: string[];
    };
    /**
     * Lookup389: pallet_bounties::Bounty<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletBountiesBounty: {
        proposer: string;
        value: string;
        fee: string;
        curatorDeposit: string;
        bond: string;
        status: string;
    };
    /**
     * Lookup390: pallet_bounties::BountyStatus<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletBountiesBountyStatus: {
        _enum: {
            Proposed: string;
            Approved: string;
            Funded: string;
            CuratorProposed: {
                curator: string;
            };
            Active: {
                curator: string;
                updateDue: string;
            };
            PendingPayout: {
                curator: string;
                beneficiary: string;
                unlockAt: string;
            };
        };
    };
    /**
     * Lookup392: pallet_bounties::pallet::Error<T>
     **/
    PalletBountiesError: {
        _enum: string[];
    };
    /**
     * Lookup393: pallet_tips::OpenTip<sp_core::crypto::AccountId32, Balance, BlockNumber, primitive_types::H256>
     **/
    PalletTipsOpenTip: {
        reason: string;
        who: string;
        finder: string;
        deposit: string;
        closes: string;
        tips: string;
        findersFee: string;
    };
    /**
     * Lookup395: pallet_tips::pallet::Error<T>
     **/
    PalletTipsError: {
        _enum: string[];
    };
    /**
     * Lookup397: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
     **/
    PalletAuthorshipUncleEntryItem: {
        _enum: {
            InclusionHeight: string;
            Uncle: string;
        };
    };
    /**
     * Lookup398: pallet_authorship::pallet::Error<T>
     **/
    PalletAuthorshipError: {
        _enum: string[];
    };
    /**
     * Lookup400: frame_support::storage::bounded_btree_set::BoundedBTreeSet<sp_core::crypto::AccountId32, S>
     **/
    FrameSupportStorageBoundedBTreeSet: string;
    /**
     * Lookup401: BTreeSet<sp_core::crypto::AccountId32>
     **/
    BTreeSet: string;
    /**
     * Lookup402: module_collator_selection::pallet::Error<T>
     **/
    ModuleCollatorSelectionError: {
        _enum: string[];
    };
    /**
     * Lookup406: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup407: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup411: module_session_manager::module::Error<T>
     **/
    ModuleSessionManagerModuleError: {
        _enum: string[];
    };
    /**
     * Lookup413: cumulus_pallet_xcmp_queue::InboundChannelDetails
     **/
    CumulusPalletXcmpQueueInboundChannelDetails: {
        sender: string;
        state: string;
        messageMetadata: string;
    };
    /**
     * Lookup414: cumulus_pallet_xcmp_queue::InboundState
     **/
    CumulusPalletXcmpQueueInboundState: {
        _enum: string[];
    };
    /**
     * Lookup417: polkadot_parachain::primitives::XcmpMessageFormat
     **/
    PolkadotParachainPrimitivesXcmpMessageFormat: {
        _enum: string[];
    };
    /**
     * Lookup420: cumulus_pallet_xcmp_queue::OutboundChannelDetails
     **/
    CumulusPalletXcmpQueueOutboundChannelDetails: {
        recipient: string;
        state: string;
        signalsExist: string;
        firstIndex: string;
        lastIndex: string;
    };
    /**
     * Lookup421: cumulus_pallet_xcmp_queue::OutboundState
     **/
    CumulusPalletXcmpQueueOutboundState: {
        _enum: string[];
    };
    /**
     * Lookup423: cumulus_pallet_xcmp_queue::QueueConfigData
     **/
    CumulusPalletXcmpQueueQueueConfigData: {
        suspendThreshold: string;
        dropThreshold: string;
        resumeThreshold: string;
        thresholdWeight: string;
        weightRestrictDecay: string;
        xcmpMaxIndividualWeight: string;
    };
    /**
     * Lookup425: cumulus_pallet_xcmp_queue::pallet::Error<T>
     **/
    CumulusPalletXcmpQueueError: {
        _enum: string[];
    };
    /**
     * Lookup426: pallet_xcm::pallet::QueryStatus<BlockNumber>
     **/
    PalletXcmQueryStatus: {
        _enum: {
            Pending: {
                responder: string;
                maybeNotify: string;
                timeout: string;
            };
            VersionNotifier: {
                origin: string;
                isActive: string;
            };
            Ready: {
                response: string;
                at: string;
            };
        };
    };
    /**
     * Lookup429: xcm::VersionedResponse
     **/
    XcmVersionedResponse: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    /**
     * Lookup435: pallet_xcm::pallet::VersionMigrationStage
     **/
    PalletXcmVersionMigrationStage: {
        _enum: {
            MigrateSupportedVersion: string;
            MigrateVersionNotifiers: string;
            NotifyCurrentTargets: string;
            MigrateAndNotifyOldTargets: string;
        };
    };
    /**
     * Lookup436: pallet_xcm::pallet::Error<T>
     **/
    PalletXcmError: {
        _enum: string[];
    };
    /**
     * Lookup437: cumulus_pallet_xcm::pallet::Error<T>
     **/
    CumulusPalletXcmError: string;
    /**
     * Lookup438: cumulus_pallet_dmp_queue::ConfigData
     **/
    CumulusPalletDmpQueueConfigData: {
        maxIndividual: string;
    };
    /**
     * Lookup439: cumulus_pallet_dmp_queue::PageIndexData
     **/
    CumulusPalletDmpQueuePageIndexData: {
        beginUsed: string;
        endUsed: string;
        overweightCount: string;
    };
    /**
     * Lookup442: cumulus_pallet_dmp_queue::pallet::Error<T>
     **/
    CumulusPalletDmpQueueError: {
        _enum: string[];
    };
    /**
     * Lookup443: orml_xtokens::module::Error<T>
     **/
    OrmlXtokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup446: orml_unknown_tokens::module::Error<T>
     **/
    OrmlUnknownTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup447: orml_xcm::module::Error<T>
     **/
    OrmlXcmModuleError: {
        _enum: string[];
    };
    /**
     * Lookup449: orml_authority::module::Error<T>
     **/
    OrmlAuthorityModuleError: {
        _enum: string[];
    };
    /**
     * Lookup451: pallet_collective::Votes<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /**
     * Lookup452: pallet_collective::pallet::Error<T, I>
     **/
    PalletCollectiveError: {
        _enum: string[];
    };
    /**
     * Lookup453: pallet_membership::pallet::Error<T, I>
     **/
    PalletMembershipError: {
        _enum: string[];
    };
    /**
     * Lookup466: pallet_democracy::PreimageStatus<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletDemocracyPreimageStatus: {
        _enum: {
            Missing: string;
            Available: {
                data: string;
                provider: string;
                deposit: string;
                since: string;
                expiry: string;
            };
        };
    };
    /**
     * Lookup467: pallet_democracy::types::ReferendumInfo<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: {
                approved: string;
                end: string;
            };
        };
    };
    /**
     * Lookup468: pallet_democracy::types::ReferendumStatus<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumStatus: {
        end: string;
        proposalHash: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    /**
     * Lookup469: pallet_democracy::types::Tally<Balance>
     **/
    PalletDemocracyTally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    /**
     * Lookup470: pallet_democracy::vote::Voting<Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletDemocracyVoteVoting: {
        _enum: {
            Direct: {
                votes: string;
                delegations: string;
                prior: string;
            };
            Delegating: {
                balance: string;
                target: string;
                conviction: string;
                delegations: string;
                prior: string;
            };
        };
    };
    /**
     * Lookup473: pallet_democracy::types::Delegations<Balance>
     **/
    PalletDemocracyDelegations: {
        votes: string;
        capital: string;
    };
    /**
     * Lookup474: pallet_democracy::vote::PriorLock<BlockNumber, Balance>
     **/
    PalletDemocracyVotePriorLock: string;
    /**
     * Lookup477: pallet_democracy::Releases
     **/
    PalletDemocracyReleases: {
        _enum: string[];
    };
    /**
     * Lookup478: pallet_democracy::pallet::Error<T>
     **/
    PalletDemocracyError: {
        _enum: string[];
    };
    /**
     * Lookup479: orml_oracle::module::TimestampedValue<sp_arithmetic::fixed_point::FixedU128, Moment>
     **/
    OrmlOracleModuleTimestampedValue: {
        value: string;
        timestamp: string;
    };
    /**
     * Lookup480: orml_utilities::ordered_set::OrderedSet<sp_core::crypto::AccountId32, S>
     **/
    OrmlUtilitiesOrderedSet: string;
    /**
     * Lookup482: orml_oracle::module::Error<T, I>
     **/
    OrmlOracleModuleError: {
        _enum: string[];
    };
    /**
     * Lookup484: orml_traits::auction::AuctionInfo<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    OrmlTraitsAuctionAuctionInfo: {
        bid: string;
        start: string;
        end: string;
    };
    /**
     * Lookup485: orml_auction::module::Error<T>
     **/
    OrmlAuctionModuleError: {
        _enum: string[];
    };
    /**
     * Lookup486: orml_rewards::PoolInfo<Share, Balance, acala_primitives::currency::CurrencyId>
     **/
    OrmlRewardsPoolInfo: {
        totalShares: string;
        rewards: string;
    };
    /**
     * Lookup494: orml_rewards::module::Error<T>
     **/
    OrmlRewardsModuleError: {
        _enum: string[];
    };
    /**
     * Lookup495: orml_nft::ClassInfo<TokenId, sp_core::crypto::AccountId32, module_nft::ClassData<Balance>, frame_support::storage::bounded_vec::BoundedVec<T, S>>
     **/
    OrmlNftClassInfo: {
        metadata: string;
        totalIssuance: string;
        owner: string;
        data: string;
    };
    /**
     * Lookup496: module_nft::ClassData<Balance>
     **/
    ModuleNftClassData: {
        deposit: string;
        properties: string;
        attributes: string;
    };
    /**
     * Lookup498: orml_nft::TokenInfo<sp_core::crypto::AccountId32, module_nft::TokenData<Balance>, frame_support::storage::bounded_vec::BoundedVec<T, S>>
     **/
    OrmlNftTokenInfo: {
        metadata: string;
        owner: string;
        data: string;
    };
    /**
     * Lookup499: module_nft::TokenData<Balance>
     **/
    ModuleNftTokenData: {
        deposit: string;
        attributes: string;
    };
    /**
     * Lookup502: orml_nft::module::Error<T>
     **/
    OrmlNftModuleError: {
        _enum: string[];
    };
    /**
     * Lookup503: module_prices::module::Error<T>
     **/
    ModulePricesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup504: module_dex::TradingPairStatus<Balance, BlockNumber>
     **/
    ModuleDexTradingPairStatus: {
        _enum: {
            Disabled: string;
            Provisioning: string;
            Enabled: string;
        };
    };
    /**
     * Lookup505: module_dex::ProvisioningParameters<Balance, BlockNumber>
     **/
    ModuleDexProvisioningParameters: {
        minContribution: string;
        targetProvision: string;
        accumulatedProvision: string;
        notBefore: string;
    };
    /**
     * Lookup508: module_dex::module::Error<T>
     **/
    ModuleDexModuleError: {
        _enum: string[];
    };
    /**
     * Lookup513: module_dex_oracle::module::Error<T>
     **/
    ModuleDexOracleModuleError: {
        _enum: string[];
    };
    /**
     * Lookup514: module_auction_manager::CollateralAuctionItem<sp_core::crypto::AccountId32, BlockNumber>
     **/
    ModuleAuctionManagerCollateralAuctionItem: {
        refundRecipient: string;
        currencyId: string;
        initialAmount: string;
        amount: string;
        target: string;
        startTime: string;
    };
    /**
     * Lookup515: module_auction_manager::module::Error<T>
     **/
    ModuleAuctionManagerModuleError: {
        _enum: string[];
    };
    /**
     * Lookup517: module_loans::Position
     **/
    ModuleLoansPosition: {
        collateral: string;
        debit: string;
    };
    /**
     * Lookup518: module_loans::module::Error<T>
     **/
    ModuleLoansModuleError: {
        _enum: string[];
    };
    /**
     * Lookup520: module_honzon::module::Error<T>
     **/
    ModuleHonzonModuleError: {
        _enum: string[];
    };
    /**
     * Lookup522: module_cdp_treasury::module::Error<T>
     **/
    ModuleCdpTreasuryModuleError: {
        _enum: string[];
    };
    /**
     * Lookup523: module_cdp_engine::RiskManagementParams
     **/
    ModuleCdpEngineRiskManagementParams: {
        maximumTotalDebitValue: string;
        interestRatePerSec: string;
        liquidationRatio: string;
        liquidationPenalty: string;
        requiredCollateralRatio: string;
    };
    /**
     * Lookup524: module_cdp_engine::module::Error<T>
     **/
    ModuleCdpEngineModuleError: {
        _enum: string[];
    };
    /**
     * Lookup525: module_emergency_shutdown::module::Error<T>
     **/
    ModuleEmergencyShutdownModuleError: {
        _enum: string[];
    };
    /**
     * Lookup526: module_homa::module::StakingLedger
     **/
    ModuleHomaModuleStakingLedger: {
        bonded: string;
        unlocking: string;
    };
    /**
     * Lookup530: module_homa::module::Error<T>
     **/
    ModuleHomaModuleError: {
        _enum: string[];
    };
    /**
     * Lookup532: module_xcm_interface::module::Error<T>
     **/
    ModuleXcmInterfaceModuleError: {
        _enum: string[];
    };
    /**
     * Lookup534: module_incentives::module::Error<T>
     **/
    ModuleIncentivesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup535: module_nft::module::Error<T>
     **/
    ModuleNftModuleError: {
        _enum: string[];
    };
    /**
     * Lookup536: module_asset_registry::module::Error<T>
     **/
    ModuleAssetRegistryModuleError: {
        _enum: string[];
    };
    /**
     * Lookup537: module_evm::module::AccountInfo<Index>
     **/
    ModuleEvmModuleAccountInfo: {
        nonce: string;
        contractInfo: string;
    };
    /**
     * Lookup539: module_evm::module::ContractInfo
     **/
    ModuleEvmModuleContractInfo: {
        codeHash: string;
        maintainer: string;
        published: string;
    };
    /**
     * Lookup542: module_evm::module::CodeInfo
     **/
    ModuleEvmModuleCodeInfo: {
        codeSize: string;
        refCount: string;
    };
    /**
     * Lookup543: module_evm::module::Error<T>
     **/
    ModuleEvmModuleError: {
        _enum: string[];
    };
    /**
     * Lookup544: module_evm_bridge::module::Error<T>
     **/
    ModuleEvmBridgeModuleError: {
        _enum: string[];
    };
    /**
     * Lookup545: module_evm_accounts::module::Error<T>
     **/
    ModuleEvmAccountsModuleError: {
        _enum: string[];
    };
    /**
     * Lookup546: nutsfinance_stable_asset::StableAssetPoolInfo<acala_primitives::currency::CurrencyId, AtLeast64BitUnsigned, Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    NutsfinanceStableAssetStableAssetPoolInfo: {
        poolAsset: string;
        assets: string;
        precisions: string;
        mintFee: string;
        swapFee: string;
        redeemFee: string;
        totalSupply: string;
        a: string;
        aBlock: string;
        futureA: string;
        futureABlock: string;
        balances: string;
        feeRecipient: string;
        accountId: string;
        yieldRecipient: string;
        precision: string;
    };
    /**
     * Lookup547: nutsfinance_stable_asset::pallet::Error<T>
     **/
    NutsfinanceStableAssetError: {
        _enum: string[];
    };
    /**
     * Lookup549: polkadot_primitives::v1::UpgradeRestriction
     **/
    PolkadotPrimitivesV1UpgradeRestriction: {
        _enum: string[];
    };
    /**
     * Lookup550: cumulus_pallet_parachain_system::relay_state_snapshot::MessagingStateSnapshot
     **/
    CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot: {
        dmqMqcHead: string;
        relayDispatchQueueSize: string;
        ingressChannels: string;
        egressChannels: string;
    };
    /**
     * Lookup553: polkadot_primitives::v1::AbridgedHrmpChannel
     **/
    PolkadotPrimitivesV1AbridgedHrmpChannel: {
        maxCapacity: string;
        maxTotalSize: string;
        maxMessageSize: string;
        msgCount: string;
        totalSize: string;
        mqcHead: string;
    };
    /**
     * Lookup554: polkadot_primitives::v1::AbridgedHostConfiguration
     **/
    PolkadotPrimitivesV1AbridgedHostConfiguration: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        maxUpwardQueueCount: string;
        maxUpwardQueueSize: string;
        maxUpwardMessageSize: string;
        maxUpwardMessageNumPerCandidate: string;
        hrmpMaxMessageNumPerCandidate: string;
        validationUpgradeCooldown: string;
        validationUpgradeDelay: string;
    };
    /**
     * Lookup560: polkadot_core_primitives::OutboundHrmpMessage<polkadot_parachain::primitives::Id>
     **/
    PolkadotCorePrimitivesOutboundHrmpMessage: {
        recipient: string;
        data: string;
    };
    /**
     * Lookup561: cumulus_pallet_parachain_system::pallet::Error<T>
     **/
    CumulusPalletParachainSystemError: {
        _enum: string[];
    };
    /**
     * Lookup562: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup564: acala_primitives::signature::AcalaMultiSignature
     **/
    AcalaPrimitivesSignatureAcalaMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
            Ethereum: string;
            Eip1559: string;
            AcalaEip712: string;
        };
    };
    /**
     * Lookup565: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup567: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup568: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup570: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
     **/
    FrameSystemExtensionsCheckNonZeroSender: string;
    /**
     * Lookup571: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup572: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup573: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup576: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup577: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup578: module_transaction_payment::ChargeTransactionPayment<T>
     **/
    ModuleTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup579: module_evm::SetEvmOrigin<T>
     **/
    ModuleEvmSetEvmOrigin: string;
};
export default _default;
